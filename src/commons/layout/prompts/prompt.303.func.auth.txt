아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX  파일경로: src/commons/layout/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/commons/layout/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/commons/layout/hooks/index.auth.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/commons/layout/tests/index.auth.hook.spec.ts

==============================================

기존히스토리 참고만 - 핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - 모든 페이지의 로드 식별 조건은 아래를 따를 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 API 조건
                - 실제데이터를 사용할 것.
                - Mock데이터 사용하지 말 것.

            4) 테스트시나리오(비로그인유저)
                1. 비회원으로 /boards에 접속하여 페이지 로드 확인
                2. layout의 로그인버튼 노출여부 확인
                3. 로그인버튼 클릭하여 /auth/login 페이지로 이동

            5) 테스트시나리오(로그인유저)
                1. 비회원으로 /auth/login에 접속하여 페이지 로드 확인
                2. 로그인시도
                    - email: 123123@123123.com
                    - password: qwer1234
                3. 로그인 성공 후, 완료 모달 클릭하여 /boards 페이지 로드 확인
                4. layout에서 유저이름, 셀렉트박스버튼 노출여부 확인
                (5. 이때 셀렉트박스버튼을 누르면 로그아웃버튼이 있을것)
                6. 셀렉트박스를 열어서 로그아웃버튼 클릭하여 /auth/login 페이지 로드 확인
                8. /boards에 접속하여 페이지 로드 확인
                9. layout에 로그인버튼 노출여부 확인

기존히스토리 참고만 - 핵심요구사항) 로그인 여부에 따라 로그인 상태표시 기능을 구현할 것.
            1) 로그인 상태표시 조건
                - 인증 프로바이더 경로: src/commons/providers/auth/auth.provider.tsx
                - 이미 셋팅되어있는 auth.provider를 사용할 것.
                - 이미 셋팅되어있는 auth.provider를 수정하지 말 것.

            2) 로그인 상태표시 분기조건
                - 인증 프로바이더의 기능을 활용하여 로그인 유무에 따라 UI를 분기하여 노출할 것.

            3) 로그인 상태표시 기능연결조건
                - 로그인유저
                    - 인증 프로바이더의 기능을 활용하여 유저이름을 노출할 것.
                    - 인증 프로바이더의 로그아웃기능을 이미 만들어져있는 로그아웃버튼에 연결할 것.

                - 비로그인유저
                    - 인증 프로바이더의 로그인기능을 이미 만들어져있는 로그인버튼에 연결할 것.
==============================================

보강조건-동기화) 라우트 변화에 따른 인증상태 재동기화
            - 목적: 로그인 직후 새로고침 없이도 레이아웃 우측(프로필/유저이름/셀렉트박스)이 즉시 반영되도록 함.
            - 전제: 기존 `auth.provider.tsx`는 수정하지 말 것. 해당 파일의 `checkAuthStatus()`만 활용할 것.
            - 구현가이드:
                1) 얇은 훅을 생성하여 경로가 바뀔 때마다 `checkAuthStatus()`를 호출할 것.
                    - 파일경로: src/commons/layout/hooks/use.auth.route.sync.hook.ts
                    - 샘플코드:
                      ```ts
                      'use client';

                      import { useEffect } from 'react';
                      import { usePathname } from 'next/navigation';
                      import { useAuth } from '@/commons/providers/auth/auth.provider';

                      export function useAuthRouteSync() {
                        const pathname = usePathname();
                        const { checkAuthStatus } = useAuth();

                        useEffect(() => {
                          // 경로 변경 시마다 로컬스토리지와 인증컨텍스트를 즉시 동기화
                          checkAuthStatus();
                        }, [pathname, checkAuthStatus]);
                      }
                      ```
                
                    
                2) 내비게이션은 가능하면 SPA 방식(`router.push`)을 사용하고,
                   로그인/로그아웃 직후에는 필요 시 `router.refresh()` 또는 커스텀 이벤트(`auth-changed`)로 동기화를 보강할 수 있음.
            - 테스트요구:
                - 로그인 성공 모달 확인 후 `/boards`로 이동 시, 새로고침 없이도 `data-testid="user-name"`, `data-testid="user-dropdown"`이 노출되어야 한다.
                - 페이지 로드 식별은 data-testid 기반으로만 수행하며, networkidle은 금지한다.