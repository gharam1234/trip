→아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
→구현 결과를 체크리스트로 반환할 것.
→

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 구현될 HOOK 파일경로: src/commons/layout/hooks/index.active.menu.hook.ts
조건-파일경로) 수정될 컴포넌트 파일경로: src/commons/layout/index.tsx

==============================================

핵심요구사항) 다음의 라우팅 문제를 해결할 것.

1) 현재 상황
   - 메뉴를 클릭했을 때 메뉴의 CSS 활성화 상태가 하드코딩되어 있음
   - tapActive 클래스가 정적으로 첫 번째 메뉴(트립토크)에만 적용됨

2) 해결 요구사항
   - usePathname() 또는 useRouter()를 활용하여 현재 라우트 감지
   - 라우트 변화에 따라 활성 메뉴를 동적으로 결정
   - 활성 메뉴의 텍스트 스타일(tapLabelPrimary)과 배경(tapActive)을 CSS 클래스로 동적 적용
   - 각 메뉴 버튼에 onClick 핸들러로 페이지 이동 기능 추가

3) 구현 범위
   - 상태 관리: useActiveMenu() 훅으로 활성 메뉴 ID 관리
   - 라우트 패턴: /boards로 시작하는 경로에서 '트립토크' 활성화
   - CSS 적용: 활성/비활성 상태에 따라 클래스 동적 바인딩
   - 테스트: data-testid 속성으로 각 메뉴 요소 식별 가능하게 구성

==============================================

핵심요구사항) TDD 방식으로 구현할 것.

1-1) 테스트 작성 (먼저 작성)
   - 파일경로: src/commons/layout/tests/index.active.menu.hook.spec.ts
   - useActiveMenu() 훅이 현재 라우트에 따라 올바른 메뉴 ID를 반환하는지 검증
   - 라우트가 변경될 때 훅이 올바르게 업데이트되는지 검증
   - /boards로 시작하는 모든 경로에서 '트립토크' 메뉴가 활성화되는지 검증

1-2) 훅 구현
   - usePathname() 또는 useRouter() 활용하여 현재 라우트 감지
   - 메뉴별 라우트 패턴 매핑
   - 라우트 변화에 따른 상태 업데이트

1-3) 컴포넌트 통합
   - useActiveMenu() 훅을 컴포넌트에서 호출
   - 반환된 활성 메뉴 ID를 기반으로 CSS 클래스 동적 적용
   - onClick 핸들러로 메뉴 클릭 시 페이지 이동
   - url.ts의 페이지URL에 정의된 경로로 이동할 것.
            1) 경로: commons/constants/url.ts
            2) 조건
                - CSS는 cursor: pointer만 추가할 것.
                - 경로를 하드코딩하지 말고, url.ts를 import 하여 적용할 것.

==============================================

조건-CSS클래스) 기존 활성/비활성 스타일 클래스 활용
            - tapActive: 활성 메뉴 배경 스타일
            - tapLabelPrimary: 활성 메뉴 텍스트 스타일
