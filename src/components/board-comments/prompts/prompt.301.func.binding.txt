아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX 파일경로: src/components/board-comments/index.tsx
조건-파일경로) 참고할 CSS 파일경로: src/components/board-comments/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/board-comments/hooks/index.binding.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/board-comments/tests/index.binding.hook.spec.ts
조건-파일경로) 구현될 QUERY 파일경로: src/components/board-comments/graphql/queries.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD 기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.

1) 테스트 제외 라이브러리
- jest
- @testing-library/react

2) 테스트 조건
- timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
- 페이지가 완전히 로드된 후 테스트할 것.
  - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
  - **중요금지사항** 페이지 로드 식별 금지사항: networkidle 대기 방법

3) 테스트 API 조건
3-1) 데이터
- 실제 API 데이터를 사용할 것.
- Mock 데이터를 사용하지 말 것.

3-2) 성공 시나리오
- API 응답 데이터를 기반으로 댓글 목록 바인딩

3-3) 실패 시나리오
- API 호출 실패 또는 빈 배열 처리

4) 데이터 조건
    - 저장소: 백엔드 서버(GraphQL API)
    - 요청방식: fetchBoardComments query
    - 요청 파라미터 구조:

        query fetchBoardComments($boardId: ID!, $page: Int) {
          fetchBoardComments(boardId: $boardId, page: $page) {
            _id
            writer
            contents
            rating
            createdAt
            updatedAt
            deletedAt
            user {
              _id
              email
              name
            }
          }
        }

핵심요구사항) 현재의 모든 구조를 그대로 유지하고, 하드코딩된 Mock데이터를 제거하고, 실제 fetchBoardComments API 데이터를 바인딩할 것.

1) 바인딩할 데이터
- Apollo Client useQuery(FETCH_BOARD_COMMENTS) 결과

2) 데이터 바인딩 상세내용
- 작성자: 댓글 객체의 writer
- 내용: 댓글 객체의 contents
- 평점: 댓글 객체의 rating
- 작성일: 댓글 객체의 createdAt → "YYYY.MM.DD HH:mm" 형식으로 포맷
- 내용: 댓글 객체의 contents → 3줄을 넘어가는 경우, "..." 처리

3) CSS 처리
- 댓글 내용이 길 경우 display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden; 적용

4) 테스트
- 로컬스토리지 모킹 없이 실제 API 데이터를 테스트
- Playwright 테스트에서 API 호출 후 렌더링된 댓글 데이터를 검증
