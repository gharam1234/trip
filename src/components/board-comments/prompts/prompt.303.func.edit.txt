아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX 파일경로: src/components/board-comments/index.tsx
조건-파일경로) 참고할 CSS 파일경로: src/components/board-comments/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/board-comments/hooks/index.edit.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/board-comments/tests/index.edit.hook.spec.ts
조건-파일경로) 구현될 MUTATION 파일경로: src/components/board-comments/graphql/mutations.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 API 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.

                3-2) 성공시나리오
                    - 댓글 수정/삭제 후 목록이 자동으로 업데이트되는지 검증

                3-3) 실패시나리오
                    - 비밀번호 불일치 시 에러 처리
                    - API 호출 실패 시 에러 메시지 표시

            4) 데이터 조건 - 수정
                - 저장소: 백엔드 서버(GraphQL API)
                - 요청방식: updateBoardComment mutation
                -1. 요청 파라미터 구조:

                    mutation updateBoardComment(
updateBoardCommentInput: UpdateBoardCommentInput!
password: String
boardCommentId: ID!
)

-2.UpdateBoardCommentInput구조 :
contents: String
rating: Float

-3.반환값 :
 _id: ID!
writer: String
contents: String!
rating: Float!
user: User
createdAt: DateTime!
updatedAt: DateTime!
deletedAt: DateTime

            5) 데이터 조건 - 삭제
                - 저장소: 백엔드 서버(GraphQL API)
                - 요청방식: deleteBoardComment mutation
                - 1 요청 파라미터 구조:

                    mutation deleteBoardComment(
password: String
boardCommentId: ID!
)
-2 반환값 : ID!

5.2 
기존요구사항 참고만 - 핵심요구사항) 각 댓글 아이템에 수정/삭제 버튼을 추가하고, 클릭 시 해당 기능을 구현할 것.

1) 수정 기능
- 수정 버튼 클릭 시 해당 댓글이 수정 모드로 전환
- 기존 내용이 입력 폼에 미리 채워짐
- 비밀번호 입력 필요
- 수정 완료 후 댓글 목록 refetch

2) 삭제 기능
- 삭제 버튼 클릭 시 확인 모달 표시
- 비밀번호 입력 필요
- 삭제 완료 후 댓글 목록 refetch

3) 권한 검증
- 본인이 작성한 댓글만 수정/삭제 가능
- 비밀번호가 일치해야 수정/삭제 가능

4) 테스트
- 수정 모드 전환 테스트
- 수정 API 호출 성공/실패 시나리오 테스트
- 삭제 API 호출 성공/실패 시나리오 테스트
- 비밀번호 검증 테스트

==============================================

핵심요구사항) 수정폼에서 rating을 바꿀려고 클릭해도 바뀌지 않음 rating이 바뀔수 있게 수정
