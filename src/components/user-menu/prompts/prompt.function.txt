아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX 파일경로: src/components/boards-detail/index.tsx
조건-파일경로) 참고할 CSS 파일경로: src/components/boards-detail/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/boards-detail/hooks/index.function.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/boards-detail/tests/index.function.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.

            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react
                - mock 데이터 및 mock 함수는 사용하지 말 것.

            2) 테스트 조건
                - baseUrl을 포함하지 않고 경로만 사용할 것. (예: /boards/123)
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle, waitForTimeout 대기 방법

            3) 테스트 데이터 조건
                3-1) 데이터 형식
                    - 저장소: localStorage
                    - key: boardViewCount
                    - value: { boardId: string, viewCount: number }

                3-2) 성공 시나리오
                    - 게시글이 정상적으로 로드되는지 확인
                    - 게시글 정보(제목, 작성자, 날짜)가 정확히 렌더링되는지 확인
                    - 조회수가 증가하는지 확인

                3-3) 실패 시나리오
                    - 존재하지 않는 게시글 ID 접근 시 에러 처리 확인
                    - 데이터 로드 실패 시 폴백 처리 확인

핵심요구사항) 현재의 모든 구조를 그대로 유지하고, 게시글 상세 정보를 동적으로 관리할 것.

1) 데이터 소스
   - API: GraphQL @apollo-client 사용
   - 캐시: localStorage에 조회수 정보 저장
   - 초기값: 게시글 로드 시 API에서 데이터 fetch

2) 동적 데이터 처리
   - boards-detail 컴포넌트에서 hook을 import하여 데이터를 받을 것
   - URL 파라미터(BoardId)에서 게시글 ID를 추출할 것
   - API 호출을 통해 게시글 데이터를 가져올 것
   - 렌더링 로직은 변경하지 말 것

3) 컴포넌트 업데이트
   - boards-detail 컴포넌트에서 hook을 import하여 사용할 것
   - hook에서 반환한 데이터를 컴포넌트 렌더링에 사용할 것
   - 로딩 상태와 에러 상태를 처리할 것

4) 테스트 요구사항
   - 게시글이 정상적으로 로드되는지 확인
   - URL 파라미터에서 게시글 ID를 올바르게 추출하는지 확인
   - API 응답이 올바르게 처리되는지 확인
   - 조회수가 로컬스토리지에 저장되는지 확인
