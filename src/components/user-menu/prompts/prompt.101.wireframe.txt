아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @02-wireframe.mdc

==============================================

조건-파일경로) 구현될 TSX 파일경로: src/components/user-menu/index.tsx
조건-파일경로) 구현될 CSS 파일경로: src/components/user-menu/styles.module.css

==============================================

핵심요구사항) 완성된 컴포넌트를 페이지에서 import하여 연결시킬 것.
                - 연결될 경로: src/commons/layout/index.tsx
                - ** 중요 ** 레이아웃 인덱스에서 드랍다운 했을때 나오는 유저메뉴에 연결 시킬 것(기존의 것과 대체 할것)

핵심요구사항) HTML과 flexbox를 활용한 와이어프레임 구조만 만들어낼 것.
                - 와이어프레임 작성 후 data-testid를 사용하여 테스트 가능하도록 구성할 것.

핵심요구사항) 다음의 레이아웃 구조를 정확히 구현할 것.

1) 최상위 container (전체 게시글 상세 페이지)
   - 구조: flexbox 세로 정렬 (flex-direction: column)
   - 정렬: 중앙 정렬 (align-items: center)
   - 갭: 24px 간격

2) header 영역 (게시글 정보)
   - 최대 너비: 400px
   - 전체 너비: 100%
   - 내부 구조:
     - div 제목 영역: "게시글 상세"
     - div 메타데이터 영역:
       - 작성자 정보
       - 작성 날짜
       - 조회수

3) contentWrapper 영역
   - 최대 너비: 400px
   - 전체 너비: 100%
   - 구조: 게시글 본문 content를 감싸는 wrapper
   - 테두리: border-radius 8px
   - 오버플로우: hidden
   - 내부 요소: article 태그로 본문 내용

4) actionsSection 영역
   - 최대 너비: 400px
   - 전체 너비: 100%
   - 구조: flexbox 가로 정렬 (justify-content: space-between)
   - 내부 요소:
     - 수정 버튼
     - 삭제 버튼
     - 목록으로 돌아가기 버튼

핵심요구사항) 각 영역의 수치값을 아래와 같이 반영할 것. (단위: px)
                - container padding: 24px
                - container gap: 24px
                - header max-width: 400px
                - header margin-bottom: 16px
                - contentWrapper max-width: 400px
                - contentWrapper padding: 20px
                - actionsSection max-width: 400px
                - actionsSection margin-top: 20px
                - actionsSection gap: 12px
