아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX 파일경로: src/components/boards-detail/index.tsx
조건-파일경로) 참고할 CSS 파일경로: src/components/boards-detail/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/boards-detail/hooks/index.tooltip.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/boards-detail/tests/index.tooltip.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD 기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.

1) 테스트 제외 라이브러리
- jest
- @testing-library/react

2) 테스트 조건
- timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
- 페이지가 완전히 로드된 후 테스트할 것.
  - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
  - **중요금지사항** 페이지 로드 식별 금지사항: networkidle 대기 방법

3) 테스트 API 조건
3-1) 데이터
- 실제 API 데이터를 사용할 것.
- Mock 데이터를 사용하지 말 것.

3-2) 성공 시나리오
- fetchBoard API에서 boardAddress.address이 존재하는 경우, 툴팁이 표시되는지 확인
- iconLocation 요소에 마우스 호버 시 툴팁이 나타나는지 확인
- 툴팁에 address 값이 정확히 표시되는지 확인

3-3) 실패 시나리오
- boardAddress.address이 없는 경우, 기본 메시지("상세주소 정보 없음") 표시 확인

4) 데이터 조건
    - 저장소: 백엔드 서버(GraphQL API)
    - 요청방식: fetchBoard query
    - 요청 파라미터 구조:

        query FetchBoard($boardId: ID!) {
          fetchBoard(boardId: $boardId) {
            _id
            writer
            title
            contents
            youtubeUrl
            likeCount
            dislikeCount
            images
            boardAddress {
              zipcode
              address
              addressDetail
            }
            user {
              _id
              email
              name
            }
            createdAt
            updatedAt
            deletedAt
          }
        }

핵심요구사항) 현재의 모든 구조를 그대로 유지하고, iconLocation 요소에 마우스 호버 시 상세주소를 툴팁으로 표시할 것.

1) 바인딩할 데이터
- Apollo Client useQuery(FETCH_BOARD) 결과에서 boardAddress.address

2) 툴팁 기능 상세내용
- iconLocation 요소에 마우스 호버 시 툴팁 표시
- 툴팁 내용: boardAddress.address 값
- boardAddress.address이 없는 경우: "상세주소 정보 없음" 표시
- 툴팁 위치: iconLocation 요소에 오버레이하여 표시
- 마우스가 요소를 떠나면 툴팁 숨김

3) antd Tooltip 라이브러리 구현 지침
- antd의 Tooltip 컴포넌트를 사용할 것
- Tooltip import: import { Tooltip } from 'antd'
- Tooltip 래핑 구조:
  <Tooltip
    title={address || "상세주소 정보 없음"}
    placement="top"
    overlayClassName="board-address-tooltip"
  >
    <div className={styles.iconLocation}>...</div>
  </Tooltip>
- title prop: boardAddress.address 값 또는 기본 메시지
- placement: "top" (위치 조정 필요 시 "bottom", "left", "right" 사용 가능)
- overlayClassName: 추가 CSS 스타일링이 필요할 경우 사용
- 마우스 호버 시 자동으로 표시, 벗어나면 자동으로 숨김

4) Hook 구현 (useTooltip)
- 경로: src/components/boards-detail/hooks/index.tooltip.hook.ts
- 기능:
  - boardAddress 데이터에서 address 추출
  - address이 없는 경우 기본 메시지 반환
  - 툴팁 활성화 상태 관리
- 반환값: { tooltipTitle: string; isVisible: boolean }

5) 테스트
- Playwright 테스트에서 실제 API 데이터를 사용하여 테스트
- 마우스 호버 동작을 시뮬레이션하여 툴팁 표시 확인
- 툴팁에 표시되는 텍스트가 API에서 받아온 address과 일치하는지 확인
- address이 없는 경우 기본 메시지가 표시되는지 확인
- 테스트 단계:
  1. data-testid="icon-location"인 요소가 로드될 때까지 대기
  2. 해당 요소에 마우스를 호버
  3. Tooltip 콘텐츠가 DOM에 나타났는지 확인 (visible 상태 확인)
  4. 텍스트 콘텐츠 일치 검증