아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX 파일경로: src/components/mainCard/index.tsx
조건-파일경로) 참고할 CSS 파일경로: src/components/mainCard/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/mainCard/hooks/index.binding.hook.ts
조건-파일경로) 구현될 QUERY 파일경로: src/components/mainCard/graphql/queries.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/mainCard/tests/index.binding.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD 기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.

1) 테스트 제외 라이브러리
- jest
- @testing-library/react

2) 테스트 조건
- timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
- 페이지가 완전히 로드된 후 테스트할 것.
  - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
  - **중요금지사항** 페이지 로드 식별 금지사항: networkidle 대기 방법

3) 테스트 API 조건
3-1) 데이터
- 실제 API 데이터를 사용할 것.
- Mock 데이터를 사용하지 말 것.

3-2) 성공 시나리오
- API 응답 데이터를 기반으로 좋아요 순서대로 정렬하여 상위 4개 바인딩

3-3) 실패 시나리오
- API 호출 실패 또는 빈 배열 처리

4) 데이터 조건
    - 저장소: 백엔드 서버(GraphQL API)
    - 요청방식: FetchBoards query (전체 게시글 목록)
    - 파라미터: 모든 파라미터 생략 (search, startDate, endDate, page는 optional이므로 전체 데이터 반환)
    - 요청 파라미터 구조:

        query FetchBoards {
          # 파라미터 없이 호출하여 전체 게시글 가져오기
          fetchBoards {
            _id
            title
             user {
                name
                picture
              }
            likeCount
            images
            createdAt
          }
        }

핵심요구사항) 현재의 모든 구조를 그대로 유지하고, 하드코딩된 Mock데이터를 제거하고, 실제 FetchBoards API 데이터를 바인딩할 것.

1) 바인딩할 데이터
- Apollo Client useQuery(FetchBoards) 결과

2) 데이터 바인딩 상세내용
- 게시글 이미지: 게시글 객체의 images[0] (배열의 첫 번째 이미지만 사용, 카드 썸네일로 표현)
  * 만약에 게시글에서 가져올 이미지가 없으면 /images/sample.png 파일로 대체할 것
- 제목: 게시글 객체의 title
- 작성자명: 게시글 객체의 user.name
- 작성자 이미지: 게시글 객체의 user.picture
- 좋아요 갯수: 게시글 객체의 likeCount
- 정렬: likeCount 기준 내림차순으로 정렬하여 상위 4개만 표시
- 날짜 포맷: createdAt을 'YYYY.MM.DD' 형식으로 변환

3) CSS 처리
- 제목이 길 경우 text-overflow: ellipsis; white-space: nowrap; overflow: hidden; 적용

4) 테스트
- 로컬스토리지 모킹 없이 실제 API 데이터를 테스트
- Playwright 테스트에서 API 호출 후 렌더링된 데이터를 검증
- like count가 높은 순서대로 4개의 카드가 렌더링되었는지 검증
- 게시글 이미지는 images 배열의 첫 번째 요소가 올바르게 표시되었는지 검증
