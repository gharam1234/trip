아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것. 구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
- @01-common.mdc
- @04-func.mdc

==============================================

조건-파일경로)
- 참고할 TSX 파일경로: src/components/boards/index.tsx
- 참고할 CSS 파일경로: src/components/boards/styles.module.css
- 구현될 HOOK 파일경로: src/components/boards/hooks/index.indexing.hook.ts
- 구현될 TEST 파일경로: src/components/boards/tests/index.indexing.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD 기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.

1) 테스트 제외 라이브러리
- **중요금지사항** : jest
- **중요금지사항** : @testing-library/react

2) 테스트 조건
- timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
- 페이지가 완전히 로드된 후 테스트할 것.
  - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
  - **중요금지사항** 페이지 로드 식별 금지사항: networkidle 대기 방법

3) 테스트 API 조건
3-1) 데이터
- 실제 API 데이터를 사용할 것.
- Mock 데이터를 사용하지 말 것.
==============================================

핵심요구사항) 
-현재상황 : 게시글 number가 _id에 바인딩된 상태
-요구사항 : number가 _id가 아니라 .map() 메서드안에서 index라는 파라미터를 이용하여 0부터 totalCount까지 인덱싱(넘버링)할 것

조건 1) Apollo-client의 useQuery를 사용 FETCH_BOARD_COUNT를 사용하여 게시글의 totalCount를 사용할 것
조건 2) totalCount를 이용하여 각 1페이지당 10개의 게시글의 number를 인덱싱할 것
조건 3) 최신글 일수록 가장 큰 숫자가 인덱싱될 것 (역순으로)
==============================================
핵심요구사항) 테스트
- 로컬스토리지 모킹 없이 실제 API 데이터를 테스트
- Playwright 테스트에서 API 호출 후 렌더링된 데이터를 검증
