아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX  파일경로: src/components/boards/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/boards/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/boards/hooks/index.binding.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/boards/tests/index.binding.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /boards 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 로컬스토리지 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.

                3-2) 성공시나리오
                    - 로컬스토리지 모킹하지 말 것.

                3-3) 실패시나리오
                    - 로컬스토리지 모킹하지 말 것.

            3) 테스트 데이터타입
                 - 저장소: 로컬스토리지
                - key: boards
                - value: [{ 
                    boardId: String,
                    writer: String,
                    password: String,
                    title: String!,
                    contents: String!,
                    youtubeUrl: String,
                    boardAddress: BoardAddressInput{
                        zipcode: String
                        address: String
                        addressDetail: String
                    }
                    images: [String!]
                    createdAt:String

                }]


기존히스토리 참고만 - 핵심요구사항) 현재의 모든 구조를 그대로 유지하고, 하드코딩된 Mock데이터를 제거하고, 실제 데이터를 바인딩할 것.
            1) 바인딩할 데이터
                - 로컬스토리지에 저장된 boards 배열 내부의 객체들

            2) 데이터바인딩 상세내용
                - 번호: 게시글객체의 boardId
                - 제목: 게시글객체의 title
                - 작성자: 게시글객체의 writer
                - 작성일: 게시글객체의 createdAt
                - 제목: 게시글객체의 title => 사이즈를 넘어가는 경우, "..."으로 표현하여 해당 칸의 사이즈를 넘어가지 않도록 할 것.

==============================================

핵심요구사항) 다음 문제를 해결
-현재상황 : 최신 글이 맨 위에 있어야 되는데 반대로 되어있음
-해결방향 : 최신 글일수록 위에 오도록 역순으로 위치할 것